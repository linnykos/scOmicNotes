"survival",
"ggplot2",
"survminer",
"equivalence",
"MuMIn") #model selection
for(i in rpkg_list){
if (!i%in%installed.packages()){
install.packages(i)
library(i,character.only = TRUE)
} else {
library(i,character.only = TRUE)
}
}
#formula_sign can be "+" or "*"
generate_cox_model <- function(data, time_columns, event_column, covariate_columns, formula_sign="+") {
time <- time_columns[1] #should always be at least one time column
if (length(time_columns)==2) { #time dependent model
time2 <- time_columns[2]
survival_formula <- formula(paste0("Surv(", time, ",", time2, ",", event_column, ")", "~", paste(covariate_columns, collapse=formula_sign)))
} else if (length(time_columns)==1) { #classical cox model
survival_formula <- formula(paste0("Surv(", time, ",", event_column, ")", "~", paste(covariate_columns, collapse=formula_sign)))
} else {
print("time column(s) not specified correctly")
}
cox_model <- coxph(survival_formula, data=data)
return(cox_model)
}
summarize_cox_model <- function(cox_model) {
hazard_ratio <- as.numeric(summary(cox_model)$coefficients[,"exp(coef)"])
pvalue <- as.numeric(summary(cox_model)$coefficients[,"Pr(>|z|)"]) #based on Wald I think
conf_interval <- exp(confint(cox_model)) #https://stackoverflow.com/questions/36941746/how-to-get-95-ci-from-rs-coxph
conf_interval_2pt5 <- conf_interval[,1]
conf_interval_97pt5 <- conf_interval[,2]
outdf <- data.frame("hazard_ratio"=hazard_ratio,
"pvalue"=pvalue,
"CI_2.5"=conf_interval_2pt5,
"CI_97.5"=conf_interval_97pt5)
return(outdf)
}
plot_survival <- function(survfit, data, pval, legend_labs=NULL) {
ggsurvplot_obj <- ggsurvplot(fit=survfit, data=data,
censor.shape = "+",
break.time.by = 3,
#conf.int = TRUE,
risk.table = TRUE,
surv.median.line = 'hv',
legend.title = "",
pval = paste0("p=", pval),
xlab = 'Time (months)',
tables.height = 0.2,
ggtheme = theme_bw(),
legend.labs = legend_labs,
size = 4.5,
fontsize = 12,
pval.size = 14,
censor.size = 10) +
theme_survminer(font.main = c(30, "bold.italic"),
font.submain = c(30, "bold.italic"),
font.legend = c(28, "bold.italic"),
font.x = c(28, "bold.italic"),
font.y = c(28, "bold.italic"),
font.tickslab = c(28, "bold.italic"))
return(ggsurvplot_obj)
}
#updated to include KM curves (the only difference in the formulas is conversion from days to months)
#km_bool: whether to generate a KM curve; the output is a list instead of a Cox model object
generate_cox_model_with_KM <- function(data, time_columns, event_column, covariate_columns, formula_sign="+", km_bool=TRUE) {
time <- time_columns[1] #should always be at least one time column
if (length(time_columns)==2) { #time dependent model
time2 <- time_columns[2]
survival_formula <- formula(paste0("Surv(", time, ",", time2, ",", event_column, ")", "~",
paste(covariate_columns, collapse=formula_sign)))
survival_formula_for_KM <- formula(paste0("Surv(", time, "/30.43,", time2, "/30.43,", event_column, ")", "~",
paste(covariate_columns, collapse=formula_sign)))
} else if (length(time_columns)==1) { #classical cox model
survival_formula <- formula(paste0("Surv(", time, ",", event_column, ")", "~",
paste(covariate_columns, collapse=formula_sign)))
survival_formula_for_KM <- formula(paste0("Surv(", time, "/30.43,", event_column, ")", "~",
paste(covariate_columns, collapse=formula_sign)))
} else {
print("time column(s) not specified correctly")
}
cox_model <- coxph(survival_formula, data=data)
if (km_bool) {
survfit_obj <- surv_fit(survival_formula_for_KM, data=data) #https://github.com/kassambara/survminer/issues/283
outlist <- list("cox_model"=cox_model,
"survfit"=survfit_obj)
return(outlist)
}
return(cox_model)
}
all_data <- read.csv("../AnalysisData/BI-001_compiled_data_w_race_stage_met_subtype_YL_ever_on_cyto.csv")
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos", "AR_pos", "HER2_pos",                     # CTCs/3mL
"on_cytotoxic", "on_her2", "on_er", "on_ar")                                              # treatment information
#"bone_met", "brain_met", "digestive_system_met", "lung_met", "lymph_node_met",            # met site information
#"Metastases.Site.Count",                                                                  # met site count
#"Categorized.Stage.at.Dx", "Receptors")
#single-covariate models
cox_models <- lapply(covariate_list, function(tmp_covariate) {
cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", tmp_covariate)
})
names(cox_models) <- covariate_list
univariate_model_summary <- lapply(cox_models, summarize_cox_model)
univariate_model_summary <- do.call(rbind, univariate_model_summary)
univariate_model_summary
#write.table(univariate_model_summary, file="../AnalysisData/univariate_model_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
#multi-covariate models
#with CTC positivity
multivariate_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", covariate_list)
multivariate_model_summary <- summarize_cox_model(multivariate_cox_model)
multivariate_model_summary
#write.table(multivariate_model_summary, file="../AnalysisData/multivariate_model_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
#without CTC positivity
#covariate_list <- c("CIN_CTC_pos", "SCNE_pos", "SI_pos", "AR_pos", "HER2_pos",                     # CTCs/3mL
#                    "on_cytotoxic", "on_her2", "on_er", "on_ar",                                              # treatment information
#                    "bone_met", "brain_met", "digestive_system_met", "lung_met", "lymph_node_met",            # met site information
#                    "Metastases.Site.Count",                                                                  # met site count
#                    "Categorized.Stage.at.Dx", "Receptors")                                                   # others
#multivarite_cox_model_no_CTC_pos <- generate_cox_model(all_data, c("time1","time2"), "OS_status", covariate_list)
#multivariate_model_summary <- summarize_cox_model(multivarite_cox_model_no_CTC_pos)
#write.table(multivariate_model_summary, file="../AnalysisData/multivariate_model_without_CTCpos_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
#with just the 4 significant covariates from univaraite model
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos")
multivarite_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", covariate_list)
multivariate_model_summary <- summarize_cox_model(multivarite_cox_model)
write.table(multivariate_model_summary, file="../AnalysisData/multivariate_model_uni_top4_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
#with just the 4 significant covariates from multivariate model
covariate_list <- c("CIN_CTC_pos", "SCNE_pos", "HER2_pos", "on_er")
multivarite_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", covariate_list)
multivariate_model_summary <- summarize_cox_model(multivarite_cox_model)
write.table(multivariate_model_summary, file="../AnalysisData/multivariate_model_multi_top4_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
#with all significant covariates from univariate and multivariate model
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos", "HER2_pos", "on_er")
multivarite_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", covariate_list)
multivariate_model_summary <- summarize_cox_model(multivarite_cox_model)
write.table(multivariate_model_summary, file="../AnalysisData/multivariate_model_uni_multi_top6_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
# Interaction analysis in predicting survival (OS) with the covariates above in an univariate classical Cox model (timepoint 1) and in a Cox time dependent model (p values).
summarize_interaction_cox_model <- function(cox_model) {
interaction_term <- tail(summary(cox_model)$coefficients,1)
pvalue <- as.numeric(interaction_term[,"Pr(>|z|)"])
hazard_ratio <- as.numeric(interaction_term[,"exp(coef)"])
conf_interval <- tail(exp(confint(cox_model)),1) #https://stackoverflow.com/questions/36941746/how-to-get-95-ci-from-rs-coxph
conf_interval_2pt5 <- conf_interval[,1]
conf_interval_97pt5 <- conf_interval[,2]
outdf <- data.frame("hazard_ratio"=hazard_ratio,
"pvalue"=pvalue,
"CI_2.5"=conf_interval_2pt5,
"CI_97.5"=conf_interval_97pt5)
return(outdf)
}
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos", "AR_pos", "HER2_pos",                     # CTCs/3mL
"on_cytotoxic", "on_her2", "on_er", "on_ar")                                              # treatment information
#                    "bone_met", "brain_met", "digestive_system_met", "lung_met", "lymph_node_met",            # met site information
#                    "Metastases.Site.Count",                                                                  # met site count
#                    "Categorized.Stage.at.Dx", "Receptors")                                                   # others
covariate_combos <- combn(covariate_list, 2, simplify=F)
cox_models <- lapply(covariate_combos, function(tmp_covariate) {
cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", tmp_covariate, formula_sign="*")
})
names(cox_models) <- covariate_combos
model_summary <- lapply(cox_models, summarize_interaction_cox_model)
model_summary <- do.call(rbind, model_summary)
model_summary
#Using https://mathweb.ucsd.edu/~rxu/math284/model_sel.pdf as reference
#select and sort by p-values of univariable models
pval_list <- univariate_model_summary$pvalue
univariate_model_summary <- univariate_model_summary[order(pval_list),]
univariate_model_summary <- univariate_model_summary[univariate_model_summary$pvalue < 0.2,]
ordered_covariate_list <- rownames(univariate_model_summary)
univariate_model_summary
#forward (fwd) selection (build from 1 to n covariates)
n <- length(ordered_covariate_list)
fwd_stepwise_cox_models <- lapply(1:n, function (i) {
tmp_covariate_list <- ordered_covariate_list[1:i]
tmp_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", tmp_covariate_list)
})
names(fwd_stepwise_cox_models) <- unlist(lapply(1:n, function (i) {paste(ordered_covariate_list[1:i], collapse=", ")}))
fwd_stepwise_cox_models
#no CTC_pos
#ordered_covariate_list_no_CTC_pos <- c("CIN_CTC_pos", "SI_pos", "SCNE_pos")
#n <- length(ordered_covariate_list_no_CTC_pos)
#fwd_stepwise_cox_models_no_CTC_pos <- lapply(1:n, function (i) {
#  tmp_covariate_list <- ordered_covariate_list_no_CTC_pos[1:i]
#  tmp_cox_model <- generate_cox_model(all_data, c("time1","time2"), "OS_status", tmp_covariate_list)
#})
#names(fwd_stepwise_cox_models_no_CTC_pos) <- unlist(lapply(1:n, function (i) {paste(ordered_covariate_list_no_CTC_pos[1:i], collapse=", ")}))
#fwd_stepwise_cox_models_no_CTC_pos
#This would be either based on time point 1 or any time point as the covariate
# Subgroup analysis, univariate classical Kaplan Meyer (timepoint 1 only) and Cox time dependent Kaplan Meyer for prognostic value of CTC (cutoff/3ml) in the following subgroups:
# Chemotherapy treated patients (at both timepoint 1 and any timepoint) (4 Kaplans Meyers)
# Non chemotherapy treated patients (at both timepoint 1 and any timepoint) (4 Kaplans Meyers)
# Subgroup analysis, univariate classical Kaplan Meyer (timepoint 1 only) and Kaplan Meyer Cox time dependent model for prognostic value of chemotherapy in the following subgroups:
# CTC≥ cutoff/3ml (at both timepoint 1 and any timepoint) (4 Kaplans Meyers)
# CTC< cutoff/3ml (at both timepoint 1 and any timepoint) (4 Kaplans Meyers)
data_by_patient <- split(all_data, all_data$PtID) #split by patient
data_by_patient <- lapply(data_by_patient, function(tmp_df) {
CTC_positivity_tp_1 <- tmp_df$CTC_pos[1] #tp stands for "time point"; time point 1
CTC_positivity_any_tp <- any(tmp_df$CTC_pos) #any time point
on_cytotoxic_tp_1 <- tmp_df$on_cytotoxic[1]
on_cytotoxic_any_tp <- any(tmp_df$on_cytotoxic==TRUE)
tmp_df$CTC_positivity_tp_1 <- CTC_positivity_tp_1
tmp_df$CTC_positivity_any_tp <- CTC_positivity_any_tp
tmp_df$on_cytotoxic_tp_1 <- on_cytotoxic_tp_1
tmp_df$on_cytotoxic_any_tp <- on_cytotoxic_any_tp
return(tmp_df)
})
per_patient_annotation <- do.call(rbind, lapply(data_by_patient,head,1))
#Split by CTC positivity
CTC_positivity_tp_1 <- per_patient_annotation$CTC_positivity_tp_1
data_by_patient_split_by_CTC_pos_tp_1 <- split(data_by_patient, CTC_positivity_tp_1)
CTC_positivity_any_tp <- per_patient_annotation$CTC_positivity_any_tp
data_by_patient_split_by_CTC_pos_any_tp <- split(data_by_patient, CTC_positivity_any_tp)
#Split based on time point 1
data_by_patient_split_by_CTC_pos_tp_1_group_1 <- do.call(rbind, data_by_patient_split_by_CTC_pos_tp_1[[1]]) #not CTC positive
data_by_patient_split_by_CTC_pos_tp_1_group_2 <- do.call(rbind, data_by_patient_split_by_CTC_pos_tp_1[[2]]) #yes CTC positive
covariate <- "on_cytotoxic"
#Group 1: not CTC positive
cox_model1 <- generate_cox_model(data_by_patient_split_by_CTC_pos_tp_1_group_1, c("time1","time2"), "OS_status", covariate)
print(cox_model1)
#Group2: CTC positive
cox_model2 <- generate_cox_model(data_by_patient_split_by_CTC_pos_tp_1_group_2, c("time1","time2"), "OS_status", covariate)
print(cox_model2)
#Split by whether on cytotoxic chemo
on_cytotoxic_tp_1 <- per_patient_annotation$on_cytotoxic_tp_1
data_by_patient_split_by_on_cytotoxic_tp_1 <- split(data_by_patient, on_cytotoxic_tp_1)
on_cytotoxic_any_tp <- per_patient_annotation$on_cytotoxic_any_tp
data_by_patient_split_by_on_cytotoxic_any_tp <- split(data_by_patient, on_cytotoxic_any_tp)
#Split based on time point 1
data_by_patient_split_by_on_cytotoxic_tp_1_group_1 <- do.call(rbind, data_by_patient_split_by_on_cytotoxic_tp_1[[1]]) #no chemo
data_by_patient_split_by_on_cytotoxic_tp_1_group_2 <- do.call(rbind, data_by_patient_split_by_on_cytotoxic_tp_1[[2]]) #on chemo
covariate <- "CTC_pos"
#Group 1: no chemo
cox_model3 <- generate_cox_model(data_by_patient_split_by_on_cytotoxic_tp_1_group_1, c("time1","time2"), "OS_status", covariate)
print(cox_model3)
#Group 2: on chemo
cox_model4 <- generate_cox_model(data_by_patient_split_by_on_cytotoxic_tp_1_group_2, c("time1","time2"), "OS_status", covariate)
print(cox_model4)
#Summary
all_models <- list(cox_model1, cox_model2, cox_model3, cox_model4)
model_summary <- lapply(all_models, summarize_cox_model)
model_summary <- do.call(rbind, model_summary)
model_summary$subgroup <- c("CTC negative", "CTC positive", "No chemo", "On chemo")
model_summary$covariate <- c("on_cytotoxic", "on_cytotoxic", "CTC_pos", "CTC_pos")
model_summary
#Set up the groups - for each pair of covariates, there should be 4 models
set_up_subgroups <- function(data, covariate1, covariate2) {
stopifnot(covariate1%in%colnames(data)) #make sure covariates are in the input data
stopifnot(covariate2%in%colnames(data))
stopifnot(length(unique(data[!is.na(data[,covariate1]),covariate1]))==2) #both covariates should be binary variables
stopifnot(length(unique(data[!is.na(data[,covariate2]),covariate2]))==2)
#split by covariate
data_split_by_covariate_1 <- split(data, data[,covariate1])
data_split_by_covariate_2 <- split(data, data[,covariate2])
stopifnot(length(data_split_by_covariate_1)==2) #2 groups each
stopifnot(length(data_split_by_covariate_2)==2)
outlist <- list(
"data_split_by_covariate_1"=list("covariate1"=covariate1, #there is intentional redundancy for tracking purposes
"covariate2"=covariate2,
"data_split_by_covariate_1"=data_split_by_covariate_1),
"data_split_by_covariate_2"=list("covariate1"=covariate1,
"covariate2"=covariate2,
"data_split_by_covariate_2"=data_split_by_covariate_2))
return(outlist)
}
generate_cox_models_for_subgroups <- function(data_split_into_subgroups, covariate_combo, km_bool=FALSE) {
if (!km_bool) {
cox_function <- generate_cox_model
} else {
cox_function <- generate_cox_model_with_KM
}
cox_models <- lapply(names(data_split_into_subgroups), function(tmp_name) {
tmp_data_split <- data_split_into_subgroups[[tmp_name]]
if (tmp_name=="data_split_by_covariate_1") { #use covariate 2 for Cox
tmp_covariate <- tmp_data_split$covariate2
cox_models_by_covariate <- lapply(tmp_data_split[["data_split_by_covariate_1"]],
cox_function, "OS_days", "OS_status", tmp_covariate)
} else if (tmp_name=="data_split_by_covariate_2") { #use covariate 1 for Cox
tmp_covariate <- tmp_data_split$covariate1
cox_models_by_covariate <- lapply(tmp_data_split[["data_split_by_covariate_2"]],
cox_function, "OS_days", "OS_status", tmp_covariate)
}
return(cox_models_by_covariate)
})
names(cox_models) <- covariate_combo
return(cox_models)
}
#km_bool takes into account the difference in data structure when km_bool is true when models are generated
summarize_subgroup_cox_models <- function(cox_models, covariate_combo, km_bool=FALSE) {
model_summary <- lapply(cox_models, function(tmp_stratified_cox_models) {
if (km_bool) {
tmp_stratified_cox_models <- lapply(tmp_stratified_cox_models, function(tmp) tmp[["cox_model"]])
}
do.call(rbind, lapply(tmp_stratified_cox_models, summarize_cox_model))
})
model_summary <- do.call(rbind, model_summary)
model_summary$subgroup <- rownames(model_summary)
covariates <- unlist(lapply(cox_models, function(tmp_stratified_cox_models) {
unlist(lapply(tmp_stratified_cox_models, function(tmp_model) {
names(tmp_model$coefficients)
}))
}))
model_summary$covariate <- covariates
return(model_summary)
}
#Wrapper for the 3 functions above
run_subgroup_analysis <- function(data, covariate_combo, return_models_bool=FALSE, km_bool=FALSE) {
data_split_into_subgroups <- set_up_subgroups(data, covariate_combo[1], covariate_combo[2])
cox_models_by_subgroup <- generate_cox_models_for_subgroups(data_split_into_subgroups, covariate_combo, km_bool)
model_summary <- summarize_subgroup_cox_models(cox_models_by_subgroup, covariate_combo, km_bool)
if (return_models_bool) {
return(list("cox_models_by_subgroup"=cox_models_by_subgroup, "model_summary"=model_summary))
}
return(model_summary)
}
# covariate_combo <- c("CTCinc", "AR_CTCinc")
# data_split_into_subgroups <- set_up_subgroups(data_last_tp, covariate_combo[1], covariate_combo[2])
# cox_models_by_subgroup <- generate_cox_models_for_subgroups(data_split_into_subgroups, covariate_combo)
# model_summary <- summarize_subgroup_cox_models(cox_models_by_subgroup, covariate_combo)
# model_summary
#
# run_subgroup_analysis(data_last_tp, covariate_combo) #single call
#Model 2: Cox model (OS) for the six CTC covariates detected at the last blood draw for each patient (one CTC value per patient)
data_by_patient_last_tp <- lapply(data_by_patient, tail, 1)
data_last_tp <- do.call(rbind, data_by_patient_last_tp)
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos", "AR_pos", "HER2_pos")
cox_models <- lapply(covariate_list, function(tmp_covariate) {
cox_model <- generate_cox_model(data_last_tp, "OS_days", "OS_status", tmp_covariate)
})
names(cox_models) <- covariate_list
model_summary <- lapply(cox_models, summarize_cox_model)
model_summary <- do.call(rbind, model_summary)
model_summary
write.table(model_summary, file="../AnalysisData/multivariate_last_draw_model_summary.csv", row.names=TRUE, col.names=TRUE, quote=FALSE, sep=",")
# remove non-binary covariates
covariate_list <- c("CTC_pos", "CIN_CTC_pos", "SCNE_pos", "SI_pos", "AR_pos", "HER2_pos",                     # CTCs/3mL
"on_cytotoxic", "on_her2", "on_er", "on_ar")                                            # treatment information
#"bone_met", "brain_met", "digestive_system_met", "lung_met", "lymph_node_met")            # met site information
#Interaction analysis
covariate_combos <- combn(covariate_list, 2, simplify=F)
cox_models <- lapply(covariate_combos, function(tmp_covariate) {
cox_model <- generate_cox_model(data_last_tp, "OS_days", "OS_status", tmp_covariate, formula_sign="*")
})
names(cox_models) <- covariate_combos
model_summary <- lapply(cox_models, summarize_interaction_cox_model)
model_summary <- do.call(rbind, model_summary)
model_summary
#Interaction models with p-values < 0.05
significant_models <- model_summary[(!is.na(model_summary$pvalue)) & model_summary$pvalue < 0.15,]
significant_models
#In addition to the significant models, Rick wanted to include CIN_CTC_pos with chemotherapy options
additional_models <- model_summary[grepl("CIN_CTC_pos", rownames(model_summary)) & grepl("on", rownames(model_summary)),]
significant_models <- rbind(significant_models, additional_models)
# remove redundant rows
n <- dim(significant_models)[1]
significant_models <- significant_models[1:(n-2),]
significant_models
#Subgroup analysis for significant interactions
subgroup_cox_models <- lapply(1:nrow(significant_models), function(i) {
tmp_row <- significant_models[i,,F]
covariate_combo <- eval(parse(text=rownames(tmp_row)))
print(covariate_combo)
run_subgroup_analysis(data_last_tp, covariate_combo)
})
names(subgroup_cox_models) <- rownames(significant_models)
subgroup_cox_models
covariate_combo <- lapply(covariate_list, function(tmp_covariate) c(tmp_covariate, "on_cytotoxic_any_tp_new"))
subgroup_cox_models <- lapply(covariate_combo, function(tmp_covariate_combo) {
run_subgroup_analysis(all_data, tmp_covariate_combo, return_models_bool=TRUE, km_bool=TRUE)
})
names(subgroup_cox_models) <- covariate_combo
subgroup_summaries <- lapply(subgroup_cox_models, function(tmp) tmp[["model_summary"]])
subgroup_summaries
#placeholder
make_KM_plots_for_subgroups <- function() {
}
lapply(subgroup_cox_models, function(tmp_subgroup_data) {
tmp_subgroup_data <- tmp_subgroup_data[["cox_models_by_subgroup"]]
tmp_subgroups <- names(tmp_subgroup_data)
tmp_subgroup_data1 <- tmp_subgroup_data[[tmp_subgroups[1]]]
tmp_subgroup_data1_1 <- tmp_subgroup_data1[[1]]
tmp_subgroup_data1_2 <- tmp_subgroup_data1[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_F_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_1$survfit, data=all_data,
pval=round(summary(tmp_subgroup_data1_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_T_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_2$survfit, data=all_data,
pval=round(summary(tmp_subgroup_data1_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
tmp_subgroup_data2 <- tmp_subgroup_data[[tmp_subgroups[2]]]
tmp_subgroup_data2_1 <- tmp_subgroup_data2[[1]]
tmp_subgroup_data2_2 <- tmp_subgroup_data2[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_F_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_1$survfit, data=all_data,
pval=round(summary(tmp_subgroup_data2_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_T_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_2$survfit, data=all_data,
pval=round(summary(tmp_subgroup_data2_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
})
models_of_interest <- significant_models[grepl(pattern="on", rownames(significant_models)),] #interactions with drug treatments
subgroup_cox_models <- lapply(1:nrow(models_of_interest), function(i) {
tmp_row <- models_of_interest[i,,F]
covariate_combo <- eval(parse(text=rownames(tmp_row)))
data_split_into_subgroups <- set_up_subgroups(data_last_tp, covariate_combo[1], covariate_combo[2])
cox_models_by_subgroup <- generate_cox_models_for_subgroups(data_split_into_subgroups, covariate_combo, km_bool=TRUE)
})
lapply(subgroup_cox_models, function(tmp_subgroup_data) {
tmp_subgroups <- names(tmp_subgroup_data)
tmp_subgroup_data1 <- tmp_subgroup_data[[tmp_subgroups[1]]]
tmp_subgroup_data1_1 <- tmp_subgroup_data1[[1]]
tmp_subgroup_data1_2 <- tmp_subgroup_data1[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_F_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_1$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data1_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_T_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_2$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data1_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
tmp_subgroup_data2 <- tmp_subgroup_data[[tmp_subgroups[2]]]
tmp_subgroup_data2_1 <- tmp_subgroup_data2[[1]]
tmp_subgroup_data2_2 <- tmp_subgroup_data2[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_F_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_1$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data2_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_T_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_2$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data2_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
})
lapply(subgroup_cox_models, function(tmp_subgroup_data) {
tmp_subgroups <- names(tmp_subgroup_data)
tmp_subgroup_data1 <- tmp_subgroup_data[[tmp_subgroups[1]]]
tmp_subgroup_data1_1 <- tmp_subgroup_data1[[1]]
tmp_subgroup_data1_2 <- tmp_subgroup_data1[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_F_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_1$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data1_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[1],"_T_",tmp_subgroups[2],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data1_2$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data1_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
tmp_subgroup_data2 <- tmp_subgroup_data[[tmp_subgroups[2]]]
tmp_subgroup_data2_1 <- tmp_subgroup_data2[[1]]
tmp_subgroup_data2_2 <- tmp_subgroup_data2[[2]]
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_F_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_1$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data2_1$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
png_fn <- paste0("Model_2_",tmp_subgroups[2],"_T_",tmp_subgroups[1],".png")
png(file=paste0('../202305_Figures/',png_fn), w=20, h=14, res=500, units='in')
km_plot <- plot_survival(survfit=tmp_subgroup_data2_2$survfit, data=data_last_tp,
pval=round(summary(tmp_subgroup_data2_2$cox_model)$coefficients[,"Pr(>|z|)"],4))
print(km_plot)
dev.off()
})
#Model 2: Cox model (OS) for the six CTC covariates detected at the last blood draw for each patient (one CTC value per patient)
data_by_patient_last_tp <- lapply(data_by_patient, tail, 1)
install.packages("Rcpp")
install.packages("Seurat")
version(SeuratObject)
library(Seurat)
sessionInfo()
install.packages(Matrix)
install.packages(Matrix)
packageVersion("Matrix")
remove.packages("SeuratObject")
install.packages("SeuratObject")
BiocManager::install("Matrix")
> remotes::install_version("Matrix", version = "1.6-3")
remotes::install_version("Matrix", version = "1.6-3")
search()
remotes::install_version("Matrix", version = "1.6-3")
remotes::install_version("Matrix", version = "1.6-3")
library(dplyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(UpSetR)
# Step 1: Force install latest version of xfun from source
install.packages("xfun", type = "source")
# Step 2: Install litedown now that xfun is updated
install.packages("litedown")
# Step 3: Finally install markdown
install.packages("markdown")
setwd("C:/Users/linyi/Biostat_MS/scOmicNotes")
